<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
	Creates the project's release bundle.
	This script does NOT compile the source files but relies on Eclipse for compilation.
-->
<project
	default="completeBuild"
	basedir="."
	xmlns:ant4eclipse="antlib:org.ant4eclipse">

	<property name="start.dir" value="${basedir}" />
	<property name="src.java.dir" value="${start.dir}/src/java" />
	<property name="src.resources.dir" value="${start.dir}/src/resources" />
	<property name="test.java.dir" value="${start.dir}/test/java" />
	<property name="bin.dir" value="${start.dir}/bin" />
	<property name="etc.dir" value="${start.dir}/etc" />
	<property name="lib.dir" value="${start.dir}/lib" />
	<property name="target.dir" value="${start.dir}/target" />
	<property name="release.dir" value="${start.dir}/release" />
	<property name="release.lib.dir" value="${release.dir}/lib" />
	<property name="release.img.dir" value="${release.dir}/img" />
	<property name="release.jar" value="${release.dir}/sdb.jar" />
	<property name="package.dir" value="${start.dir}/package" />
	<property name="keystore.dir" value="${start.dir}/keystore" />
	<property name="keystore.file" value="${keystore.dir}/keystore" />
	<tstamp>
		<format property="build.date" pattern="yyyy-MM-dd" />
	</tstamp>
	<tstamp>
		<format property="build.time" pattern="HH:mm" />
	</tstamp>
	<tstamp>
		<format property="build.time.dashed" pattern="HH-mm" />
	</tstamp>
	<tstamp>
		<format property="build.timestamp" pattern="yyyyMMddHHmm" />
	</tstamp>

	<!-- prepare ant4eclipse -->
	<path id="lib.path">
		<fileset dir="${lib.dir}" includes="*.jar" />
	</path>
	<taskdef classpathref="lib.path" uri="antlib:org.ant4eclipse" resource="org/ant4eclipse/antlib.xml" />
	<property name="workspace.dir" value="${start.dir}/.." />
	<dirname property="project.dir" file="${start.dir}/build.xml"/>
	<basename property="project.name" file="${start.dir}"/>
	<ant4eclipse:jdtClassPathLibrary name="org.eclipse.jdt.junit.JUNIT_CONTAINER/4">
		<fileset dir="${lib.dir}">
			<include name="junit-4*.jar" />
		</fileset>
	</ant4eclipse:jdtClassPathLibrary >

	<target name="completeBuild">
		<!-- make sure that needed directories exist as expected -->
		<antcall target="prepare" inheritRefs="true" />

		<!-- extract the classpath defined in Eclipse (using ant4eclipse) -->
		<ant4eclipse:getJdtClassPath
		         pathId="classpathref"
		         workspaceDirectory="${workspace.dir}"
		         projectName="${project.name}" />

		<!-- remove some libraries from the global classpath
		     to calculate the libraries which are necessary at runtime
		     (only those need to be packaged later) -->
		<restrict id="runtimeclasspathref1">
			<path refid="classpathref"/>
			<and>
				<not>
					<name name="**/bin" />
				</not>
				<not>
					<name name="**/junit*.jar" />
				</not>
				<not>
					<name name="**/mockito*.jar" />
				</not>
			</and>
		</restrict>
		<pathconvert refid="runtimeclasspathref1" property="runtimeclasspath" pathsep=",">
		   <globmapper from="${lib.dir}/*" to="*" handledirsep="true" />
		</pathconvert>
		<fileset id="runtimeclasspathref" dir="${lib.dir}" includes="${runtimeclasspath}" />

		<!-- compile java source files-->
		<javac destdir="${bin.dir}" classpathref="classpathref" target="1.7" debug="true" includeantruntime="false">
			<src>
				<pathelement path="${src.java.dir}" />
				<pathelement path="${test.java.dir}" />
			</src>
		</javac>

		<!-- copy resources to ${bin.dir} -->
		<copy todir="${bin.dir}">
			<fileset dir="${src.resources.dir}">
				<include name="**/*" />
			</fileset>
		</copy>

		<!-- run junit tests -->
		<junit haltonerror="true" haltonfailure="true" printsummary="on" showoutput="true" includeantruntime="false">
			<classpath refid="classpathref"/>
			<batchtest>
				<fileset dir="${test.java.dir}" includes="**/*.java" />
			</batchtest>
		</junit>

		<!-- read version information -->
		<property file="${src.resources.dir}/org/zephyrsoft/sdb2/version.properties" />
		<echo message="read from properties file: version=${programVersion}" />

		<!-- build JAR file -->
		<antcall target="createJar" inheritRefs="true" />
		<!-- sign all JAR files (needed for WebStart) -->
		<antcall target="signJars" inheritRefs="true" />
		<!-- copy additional resources -->
		<copy todir="${release.img.dir}">
			<fileset dir="${src.resources.dir}/org/zephyrsoft/sdb2">
				<include name="*.png" />
			</fileset>
		</copy>
		<copy todir="${release.dir}">
			<fileset dir="${src.resources.dir}">
				<include name="webstart.php" />
				<include name="deliver.php" />
			</fileset>
		</copy>
		<!-- create PHP file to preserve build timestamp for Java WebStart -->
		<echo file="${release.dir}/constants.php">&lt;?php
define("BUILD_TIMESTAMP", "${build.timestamp}");
?&gt;</echo>

		<!-- create scripts for easy startup -->
		<echo file="${release.dir}/run-sdb.bat" append="false">java -jar %~dp0sdb.jar %1 %2 %3 %4 %5 %6 %7 %8 %9
</echo>
		<echo file="${release.dir}/run-sdb.sh" append="false">#!/bin/sh
JAVA_VERSION=$$(java -version 2&gt;&amp;1 | head -n 1)
JAVA_LOCATION=$$(which java)
echo using $$JAVA_VERSION at location $$JAVA_LOCATION
SCRIPT=$$(readlink -f $$0)
SCRIPTDIR=$$(dirname $$SCRIPT)
java -jar $$SCRIPTDIR/sdb.jar $$*
</echo>
		<!-- create package for distribution -->
		<antcall target="buildPackage" inheritRefs="true" />

	</target>

	<target name="prepare">
		<mkdir dir="${bin.dir}" />
		<delete includeemptydirs="true">
			<fileset dir="${bin.dir}" includes="**/*" />
		</delete>
		<mkdir dir="${target.dir}" />
		<delete includeemptydirs="true">
			<fileset dir="${target.dir}" includes="**/*" />
		</delete>
		<mkdir dir="${release.dir}" />
		<delete includeemptydirs="true">
			<fileset dir="${release.dir}" includes="**/*" />
		</delete>
		<mkdir dir="${release.lib.dir}" />
		<mkdir dir="${release.img.dir}" />
		<mkdir dir="${keystore.dir}" />
		<mkdir dir="${package.dir}" />
	</target>

	<target name="createJar">
		<!-- copy libraries -->
		<copy todir="${release.lib.dir}">
			<fileset refid="runtimeclasspathref"/>
		</copy>

		<manifestclasspath property="lib.list" jarfile="${release.jar}">
			<classpath>
				<fileset dir="${release.lib.dir}" includes="*.jar" />
			</classpath>
		</manifestclasspath>

		<!-- copy classes and resources -->
		<copy todir="${target.dir}">
			<fileset dir="${bin.dir}">
				<include name="org/zephyrsoft/**" />
				<include name="org/jdesktop/swingx/**" /> <!-- icons from SwingX project -->
				<include name="*.properties" />
				<include name="logback.xml" />
			</fileset>
		</copy>

		<!-- create JAR -->
		<jar basedir="${target.dir}" destfile="${release.jar}">
			<manifest>
				<attribute name="Main-Class" value="org.zephyrsoft.sdb2.Start" />
				<attribute name="Class-Path" value="${lib.list}" />
				<attribute name="Implementation-Vendor" value="zephyrsoft.net" />
				<attribute name="Implementation-Title" value="Song Database" />
				<attribute name="Implementation-Version" value="${programVersion} built on ${build.date} at ${build.time}" />
				<!-- use also a custom attribute to prevent name collision with a library jar (sometimes a problem in development) -->
				<attribute name="Song-Database-Version" value="${programVersion} built on ${build.date} at ${build.time}" />
			</manifest>
		</jar>
	</target>

	<target name="signJars">
		<!-- create keystore if necessary -->
		<antcall target="createKeystore" inheritRefs="true" />

		<!-- sign all JAR files -->
		<signjar keystore="${keystore.file}" alias="sdb" storepass="sdbsdb">
			<fileset dir="${release.dir}" includes="**/*.jar" />
		</signjar>
	</target>

	<target name="checkKeystore">
		<condition property="keystore.exists">
			<available file="${keystore.file}" />
		</condition>
	</target>

	<target name="createKeystore" depends="checkKeystore" unless="keystore.exists">
		<echo>creating keystore</echo>
		<genkey keystore="${keystore.file}" storepass="sdbsdb" alias="sdb" dname="CN=Build Script, OU=Song Database, O=ZephyrSoft, C=DE" validity="20000" />
	</target>

	<target name="buildPackage">
		<!-- create ZIP -->
		<zip destfile="${package.dir}/sdb-${programVersion}-built-on-${build.date}-at-${build.time.dashed}.zip">
			<zipfileset dir="${release.dir}" prefix="sdb-${programVersion}" />
		</zip>
	</target>

</project>